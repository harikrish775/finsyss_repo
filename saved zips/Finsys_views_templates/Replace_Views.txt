# Harikrishnan_views --------------------------------------------------

def purchase_order_details(request):
    cmp1 = company.objects.get(id=request.user)
    details = purchaseorder.objects.filter(cid_id = request.user.id)
    defaultCount = purchaseorder.objects.filter(cid_id = request.user.id).count()
    defaultAmount=0
    for i in details:
        defaultAmount += int(i.grand_total)
    return render(request,'app1/purchase_order_details.html',{'details':details,'cmp1':cmp1,'defaultCount':defaultCount,'defaultAmount':defaultAmount})




def purchase_orderby_vendor(request):
    cmp1 = company.objects.get(id=request.user)
    vendr = vendor.objects.filter(cid_id = request.user.id)
    # vendordetails = purchaseorder.objects.values('vendor_name').distinct()
    vendordetails = purchaseorder.objects.filter(cid_id=request.user.id).values('vendor_name','vendor_mail').annotate(number_of_orders=Count('vendor_balance'),total_amount=Sum('grand_total'))
    defaultCount = purchaseorder.objects.filter(cid_id=request.user.id).count()
    purchaseamount = purchaseorder.objects.filter(cid_id=request.user.id)
    defaultAmount = 0
    for i in purchaseamount:
        defaultAmount += int(i.grand_total)
    return render(request, 'app1/purchase_orderby_vendor.html', {'vendordetails': vendordetails,'vendor':vendr,'cmp1':cmp1,'defaultCount':defaultCount,'defaultAmount':defaultAmount})




def recurring_bill_report(request):
    cmp1 = company.objects.get(id=request.user)
    recur = recurring_bill.objects.filter(cid_id=request.user.id)
    defaultCount = recurring_bill.objects.filter(cid_id=request.user.id).count()
    defaultAmount = 0
    for i in recur:
        defaultAmount += i.paid_amount
    return render(request,'app1/recurring_bill_report.html',{'cmp1':cmp1,'recur':recur,'defaultCount':defaultCount,'defaultAmount':defaultAmount})


    

def recurringBillDetailsToEmail(request):
        if request.user:
            try:
                if request.method == 'POST':
                    fromdate = request.POST['FromD']
                    todate = request.POST['ToD']
                    emails_string = request.POST['email_ids']
                    if fromdate == '' and todate == '' :
                        data = recurring_bill.objects.filter(cid_id=request.user.id)
                    else:
                        data = recurring_bill.objects.filter(cid_id=request.user.id,start_date__gte=fromdate, start_date__lte=todate)
                        

                    # Split the string by commas and remove any leading or trailing whitespace
                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = request.POST['email_message']
                    
                    cmp = company.objects.get(id_id=request.user.id)
                    

                    context = {'cmp': cmp, 'data': data, 'email_message': email_message}
                    print('context working')
                    template_path = 'app1/recurring_bill_report_pdf.html'
                    print('tpath working')
                    template = get_template(template_path)
                    print('template working')
                    html = template.render(context)
                    print('html working')
                    result = BytesIO()
                    print('bytes working')
                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                    print('pisa working')

                    if pdf.err:
                        raise Exception(f"PDF generation error: {pdf.err}")

                    pdf = result.getvalue()
                    print('')
                    filename = f'recurring_bill_report-{cmp.cname}.pdf'
                    subject = f"recurring_bill_report - {cmp.cname}"
                    email = EmailMessage(subject, f"Hi, \n{email_message} -of -{cmp.cname}-{cmp.cname}. ", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, pdf, "application/pdf")
                    email.send(fail_silently=False)

                    messages.success(request, 'Report has been shared via email successfully..!')
                    return redirect('recurring_bill_report')
            except Exception as e:
                messages.error(request, f'Error while sending report: {e}')
                return redirect('recurring_bill_report')




def purchaseOrderByVendorToEmail(request):
    if request.user:
            try:
                if request.method == 'POST':
                    fromdate = request.POST['FromD']    
                    todate = request.POST['ToD']
                    emails_string = request.POST['email_ids']
                    if fromdate == '' and todate == '' :
                        data = recurring_bill.objects.filter(cid_id=request.user.id)
                    else:
                        data = recurring_bill.objects.filter(cid_id=request.user.id,start_date__gte=fromdate, start_date__lte=todate)

                    # Split the string by commas and remove any leading or trailing whitespace
                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = request.POST['email_message']
                    
                    cmp = company.objects.get(id_id=request.user.id)
                    

                    context = {'cmp': cmp, 'data': data, 'email_message': email_message}
                    print('context working')
                    template_path = 'app1/purchase_orderby_vendor_pdf.html'
                    print('tpath working')
                    template = get_template(template_path)
                    print('template working')
                    html = template.render(context)
                    print('html working')
                    result = BytesIO()
                    print('bytes working')
                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                    print('pisa working')

                    if pdf.err:
                        raise Exception(f"PDF generation error: {pdf.err}")

                    pdf = result.getvalue()
                    print('')
                    filename = f'purchase-orderby-vendor-{cmp.cname}.pdf'
                    subject = f"purchase-orderby-vendor - {cmp.cname}"
                    email = EmailMessage(subject, f"Hi, \n{email_message} -of -{cmp.cname}. ", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, pdf, "application/pdf")
                    email.send(fail_silently=False)

                    messages.success(request, 'Report has been shared via email successfully..!')
                    return redirect('purchase_orderby_vendor')
            except Exception as e:
                messages.error(request, f'Error while sending report: {e}')
                return redirect('purchase_orderby_vendor')




def purchaseOrderDetailsToEmail(request):
    if request.user:
            try:
                if request.method == 'POST':
                    fromdate = request.POST['FromD']
                    todate = request.POST['ToD']
                    emails_string = request.POST['email_ids']
                    if fromdate == '' and todate == '' :
                        data = recurring_bill.objects.filter(cid_id=request.user.id)
                    else:
                        data = recurring_bill.objects.filter(cid_id=request.user.id,start_date__gte=fromdate, start_date__lte=todate)

                    # Split the string by commas and remove any leading or trailing whitespace
                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = request.POST['email_message']
                    
                    cmp = company.objects.get(id_id=request.user.id)
                    

                    context = {'cmp': cmp, 'data': data, 'email_message': email_message}
                    print('context working')
                    template_path = 'app1/purchase_order_details_pdf.html'
                    print('tpath working')
                    template = get_template(template_path)
                    print('template working')
                    html = template.render(context)
                    print('html working')
                    result = BytesIO()
                    print('bytes working')
                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                    print('pisa working')

                    if pdf.err:
                        raise Exception(f"PDF generation error: {pdf.err}")

                    pdf = result.getvalue()
                    print('')
                    filename = f'purchase_order_details-{cmp.cname}.pdf'
                    subject = f"purchase_order_details - {cmp.cname}"
                    email = EmailMessage(subject, f"Hi, \n{email_message} -of -{cmp.cname}. ", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, pdf, "application/pdf")
                    email.send(fail_silently=False)

                    messages.success(request, 'Report has been shared via email successfully..!')
                    return redirect('purchase_order_details')
            except Exception as e:
                messages.error(request, f'Error while sending report: {e}')
                return redirect('purchase_order_details')



#--------End-----------------------